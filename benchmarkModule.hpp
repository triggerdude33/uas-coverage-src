#ifndef BENCHMARK_MODULE_HPP
#define BENCHMARK_MODULE_HPP

#include "constants.hpp"
#include "helpers.hpp"

#include <Carmenta/Engine/Core.hpp>
#include <chrono>
#include <vector>
#include <string>
#include <cmath>

using namespace Carmenta::Engine;
using namespace std::chrono;
using namespace std;

/**
	@author Matteus Berg
	@date 2025-01-15
*/
class benchmarkModule
{
public:
	explicit benchmarkModule(
		SplitOperatorPtr losWpIn,
		SplitOperatorPtr navWpIn,
		SplitOperatorPtr routeIn,
		string benchmarkDirOut);

	void benchmark(int seedNum);
	void setWaypointCalcTime(milliseconds time);
	void setTourCalcTime(milliseconds time);
	void setRouteCalcTime(milliseconds time);

private:
	void updateWaypointsRoutes();
	void updateMetrics();

	SplitOperatorPtr losWpIn;
	SplitOperatorPtr tourWpIn;
	SplitOperatorPtr routeIn;
	string benchmarkDirOut;

	milliseconds waypointCalcTime;
	milliseconds tourCalcTime;
	milliseconds routeCalcTime;
	int numWaypoints;
	double avgWpEdgeDist;
	double varWpEdgeDist;
	double avgWpRouteDist;
	double varWpRouteDist;
	double routeDist;
	double ratioNonFoundRoutes;

	// vector containing all waypoints generated by the losWaypointOperator
	vector<FeaturePtr> losPoints;
	vector<FeaturePtr> tourPoints;

	// vector containing all routes generated by the pathOperator
	vector<FeaturePtr> routes;

	int simNum;
};


#endif